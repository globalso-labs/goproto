// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: queuer/queues/v1/messages.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/gsols/goproto/queuer/entities/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.QueueState(0)
)

// define the regex for a UUID once up-front
var _messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQueueRequestMultiError, or nil if none found.
func (m *CreateQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := CreateQueueRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = CreateQueueRequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateQueueRequestMultiError(errors)
	}

	return nil
}

func (m *CreateQueueRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateQueueRequestMultiError is an error wrapping multiple validation errors
// returned by CreateQueueRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQueueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQueueRequestMultiError) AllErrors() []error { return m }

// CreateQueueRequestValidationError is the validation error returned by
// CreateQueueRequest.Validate if the designated constraints aren't met.
type CreateQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQueueRequestValidationError) ErrorName() string {
	return "CreateQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQueueRequestValidationError{}

// Validate checks the field values on CreateQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQueueResponseMultiError, or nil if none found.
func (m *CreateQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQueueResponseValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQueueResponseValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQueueResponseValidationError{
				field:  "Queue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateQueueResponseMultiError(errors)
	}

	return nil
}

// CreateQueueResponseMultiError is an error wrapping multiple validation
// errors returned by CreateQueueResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQueueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQueueResponseMultiError) AllErrors() []error { return m }

// CreateQueueResponseValidationError is the validation error returned by
// CreateQueueResponse.Validate if the designated constraints aren't met.
type CreateQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQueueResponseValidationError) ErrorName() string {
	return "CreateQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQueueResponseValidationError{}

// Validate checks the field values on GetQueueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueueRequestMultiError, or nil if none found.
func (m *GetQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = GetQueueRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetQueueRequestMultiError(errors)
	}

	return nil
}

func (m *GetQueueRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetQueueRequestMultiError is an error wrapping multiple validation errors
// returned by GetQueueRequest.ValidateAll() if the designated constraints
// aren't met.
type GetQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueueRequestMultiError) AllErrors() []error { return m }

// GetQueueRequestValidationError is the validation error returned by
// GetQueueRequest.Validate if the designated constraints aren't met.
type GetQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueueRequestValidationError) ErrorName() string { return "GetQueueRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueueRequestValidationError{}

// Validate checks the field values on GetQueueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetQueueResponseMultiError, or nil if none found.
func (m *GetQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQueue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetQueueResponseValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetQueueResponseValidationError{
					field:  "Queue",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQueue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetQueueResponseValidationError{
				field:  "Queue",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetQueueResponseMultiError(errors)
	}

	return nil
}

// GetQueueResponseMultiError is an error wrapping multiple validation errors
// returned by GetQueueResponse.ValidateAll() if the designated constraints
// aren't met.
type GetQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetQueueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetQueueResponseMultiError) AllErrors() []error { return m }

// GetQueueResponseValidationError is the validation error returned by
// GetQueueResponse.Validate if the designated constraints aren't met.
type GetQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQueueResponseValidationError) ErrorName() string { return "GetQueueResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQueueResponseValidationError{}

// Validate checks the field values on FlushQueueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FlushQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlushQueueRequestMultiError, or nil if none found.
func (m *FlushQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = FlushQueueRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FlushQueueRequestMultiError(errors)
	}

	return nil
}

func (m *FlushQueueRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FlushQueueRequestMultiError is an error wrapping multiple validation errors
// returned by FlushQueueRequest.ValidateAll() if the designated constraints
// aren't met.
type FlushQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushQueueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushQueueRequestMultiError) AllErrors() []error { return m }

// FlushQueueRequestValidationError is the validation error returned by
// FlushQueueRequest.Validate if the designated constraints aren't met.
type FlushQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushQueueRequestValidationError) ErrorName() string {
	return "FlushQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FlushQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushQueueRequestValidationError{}

// Validate checks the field values on FlushQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlushQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlushQueueResponseMultiError, or nil if none found.
func (m *FlushQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return FlushQueueResponseMultiError(errors)
	}

	return nil
}

// FlushQueueResponseMultiError is an error wrapping multiple validation errors
// returned by FlushQueueResponse.ValidateAll() if the designated constraints
// aren't met.
type FlushQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushQueueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushQueueResponseMultiError) AllErrors() []error { return m }

// FlushQueueResponseValidationError is the validation error returned by
// FlushQueueResponse.Validate if the designated constraints aren't met.
type FlushQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushQueueResponseValidationError) ErrorName() string {
	return "FlushQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FlushQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushQueueResponseValidationError{}

// Validate checks the field values on DeleteQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteQueueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteQueueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteQueueRequestMultiError, or nil if none found.
func (m *DeleteQueueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteQueueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = DeleteQueueRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteQueueRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteQueueRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteQueueRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteQueueRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteQueueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteQueueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteQueueRequestMultiError) AllErrors() []error { return m }

// DeleteQueueRequestValidationError is the validation error returned by
// DeleteQueueRequest.Validate if the designated constraints aren't met.
type DeleteQueueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteQueueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteQueueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteQueueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteQueueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteQueueRequestValidationError) ErrorName() string {
	return "DeleteQueueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteQueueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteQueueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteQueueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteQueueRequestValidationError{}

// Validate checks the field values on DeleteQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteQueueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteQueueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteQueueResponseMultiError, or nil if none found.
func (m *DeleteQueueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteQueueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteQueueResponseMultiError(errors)
	}

	return nil
}

// DeleteQueueResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteQueueResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteQueueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteQueueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteQueueResponseMultiError) AllErrors() []error { return m }

// DeleteQueueResponseValidationError is the validation error returned by
// DeleteQueueResponse.Validate if the designated constraints aren't met.
type DeleteQueueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteQueueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteQueueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteQueueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteQueueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteQueueResponseValidationError) ErrorName() string {
	return "DeleteQueueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteQueueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteQueueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteQueueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteQueueResponseValidationError{}

// Validate checks the field values on PublishMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishMessageRequestMultiError, or nil if none found.
func (m *PublishMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = PublishMessageRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishMessageRequestMultiError(errors)
	}

	return nil
}

func (m *PublishMessageRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PublishMessageRequestMultiError is an error wrapping multiple validation
// errors returned by PublishMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishMessageRequestMultiError) AllErrors() []error { return m }

// PublishMessageRequestValidationError is the validation error returned by
// PublishMessageRequest.Validate if the designated constraints aren't met.
type PublishMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishMessageRequestValidationError) ErrorName() string {
	return "PublishMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishMessageRequestValidationError{}

// Validate checks the field values on PublishMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishMessageResponseMultiError, or nil if none found.
func (m *PublishMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageId

	if len(errors) > 0 {
		return PublishMessageResponseMultiError(errors)
	}

	return nil
}

// PublishMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PublishMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishMessageResponseMultiError) AllErrors() []error { return m }

// PublishMessageResponseValidationError is the validation error returned by
// PublishMessageResponse.Validate if the designated constraints aren't met.
type PublishMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishMessageResponseValidationError) ErrorName() string {
	return "PublishMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishMessageResponseValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = SubscribeRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

func (m *SubscribeRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscribeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeResponseMultiError, or nil if none found.
func (m *SubscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribeResponseMultiError(errors)
	}

	return nil
}

// SubscribeResponseMultiError is an error wrapping multiple validation errors
// returned by SubscribeResponse.ValidateAll() if the designated constraints
// aren't met.
type SubscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeResponseMultiError) AllErrors() []error { return m }

// SubscribeResponseValidationError is the validation error returned by
// SubscribeResponse.Validate if the designated constraints aren't met.
type SubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeResponseValidationError) ErrorName() string {
	return "SubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeResponseValidationError{}

// Validate checks the field values on UnsubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeRequestMultiError, or nil if none found.
func (m *UnsubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = UnsubscribeRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnsubscribeRequestMultiError(errors)
	}

	return nil
}

func (m *UnsubscribeRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UnsubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by UnsubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type UnsubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeRequestMultiError) AllErrors() []error { return m }

// UnsubscribeRequestValidationError is the validation error returned by
// UnsubscribeRequest.Validate if the designated constraints aren't met.
type UnsubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeRequestValidationError) ErrorName() string {
	return "UnsubscribeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeRequestValidationError{}

// Validate checks the field values on UnsubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnsubscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnsubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnsubscribeResponseMultiError, or nil if none found.
func (m *UnsubscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnsubscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UnsubscribeResponseMultiError(errors)
	}

	return nil
}

// UnsubscribeResponseMultiError is an error wrapping multiple validation
// errors returned by UnsubscribeResponse.ValidateAll() if the designated
// constraints aren't met.
type UnsubscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnsubscribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnsubscribeResponseMultiError) AllErrors() []error { return m }

// UnsubscribeResponseValidationError is the validation error returned by
// UnsubscribeResponse.Validate if the designated constraints aren't met.
type UnsubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnsubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnsubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnsubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnsubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnsubscribeResponseValidationError) ErrorName() string {
	return "UnsubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnsubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnsubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnsubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnsubscribeResponseValidationError{}

// Validate checks the field values on UpdateStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStateRequestMultiError, or nil if none found.
func (m *UpdateStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = UpdateStateRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return UpdateStateRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateStateRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateStateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateStateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStateRequestMultiError) AllErrors() []error { return m }

// UpdateStateRequestValidationError is the validation error returned by
// UpdateStateRequest.Validate if the designated constraints aren't met.
type UpdateStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStateRequestValidationError) ErrorName() string {
	return "UpdateStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStateRequestValidationError{}

// Validate checks the field values on UpdateStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStateResponseMultiError, or nil if none found.
func (m *UpdateStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UpdateStateResponseMultiError(errors)
	}

	return nil
}

// UpdateStateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStateResponseMultiError) AllErrors() []error { return m }

// UpdateStateResponseValidationError is the validation error returned by
// UpdateStateResponse.Validate if the designated constraints aren't met.
type UpdateStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStateResponseValidationError) ErrorName() string {
	return "UpdateStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStateResponseValidationError{}

// Validate checks the field values on RegisterClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterClientRequestMultiError, or nil if none found.
func (m *RegisterClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = RegisterClientRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := RegisterClientRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterClientRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterClientRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegisterClientRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterClientRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterClientRequestMultiError) AllErrors() []error { return m }

// RegisterClientRequestValidationError is the validation error returned by
// RegisterClientRequest.Validate if the designated constraints aren't met.
type RegisterClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterClientRequestValidationError) ErrorName() string {
	return "RegisterClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterClientRequestValidationError{}

// Validate checks the field values on RegisterClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterClientResponseMultiError, or nil if none found.
func (m *RegisterClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return RegisterClientResponseMultiError(errors)
	}

	return nil
}

// RegisterClientResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterClientResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterClientResponseMultiError) AllErrors() []error { return m }

// RegisterClientResponseValidationError is the validation error returned by
// RegisterClientResponse.Validate if the designated constraints aren't met.
type RegisterClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterClientResponseValidationError) ErrorName() string {
	return "RegisterClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterClientResponseValidationError{}

// Validate checks the field values on GetClientsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClientsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientsRequestMultiError, or nil if none found.
func (m *GetClientsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = GetClientsRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetClientsRequestMultiError(errors)
	}

	return nil
}

func (m *GetClientsRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetClientsRequestMultiError is an error wrapping multiple validation errors
// returned by GetClientsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetClientsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientsRequestMultiError) AllErrors() []error { return m }

// GetClientsRequestValidationError is the validation error returned by
// GetClientsRequest.Validate if the designated constraints aren't met.
type GetClientsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientsRequestValidationError) ErrorName() string {
	return "GetClientsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientsRequestValidationError{}

// Validate checks the field values on GetClientsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClientsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientsResponseMultiError, or nil if none found.
func (m *GetClientsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClients() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClientsResponseValidationError{
						field:  fmt.Sprintf("Clients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClientsResponseValidationError{
						field:  fmt.Sprintf("Clients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClientsResponseValidationError{
					field:  fmt.Sprintf("Clients[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClientsResponseMultiError(errors)
	}

	return nil
}

// GetClientsResponseMultiError is an error wrapping multiple validation errors
// returned by GetClientsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetClientsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientsResponseMultiError) AllErrors() []error { return m }

// GetClientsResponseValidationError is the validation error returned by
// GetClientsResponse.Validate if the designated constraints aren't met.
type GetClientsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientsResponseValidationError) ErrorName() string {
	return "GetClientsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientsResponseValidationError{}

// Validate checks the field values on UnregisterClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterClientRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterClientRequestMultiError, or nil if none found.
func (m *UnregisterClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetQueueId()); err != nil {
		err = UnregisterClientRequestValidationError{
			field:  "QueueId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := UnregisterClientRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnregisterClientRequestMultiError(errors)
	}

	return nil
}

func (m *UnregisterClientRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UnregisterClientRequestMultiError is an error wrapping multiple validation
// errors returned by UnregisterClientRequest.ValidateAll() if the designated
// constraints aren't met.
type UnregisterClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterClientRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterClientRequestMultiError) AllErrors() []error { return m }

// UnregisterClientRequestValidationError is the validation error returned by
// UnregisterClientRequest.Validate if the designated constraints aren't met.
type UnregisterClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterClientRequestValidationError) ErrorName() string {
	return "UnregisterClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterClientRequestValidationError{}

// Validate checks the field values on UnregisterClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterClientResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterClientResponseMultiError, or nil if none found.
func (m *UnregisterClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return UnregisterClientResponseMultiError(errors)
	}

	return nil
}

// UnregisterClientResponseMultiError is an error wrapping multiple validation
// errors returned by UnregisterClientResponse.ValidateAll() if the designated
// constraints aren't met.
type UnregisterClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterClientResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterClientResponseMultiError) AllErrors() []error { return m }

// UnregisterClientResponseValidationError is the validation error returned by
// UnregisterClientResponse.Validate if the designated constraints aren't met.
type UnregisterClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterClientResponseValidationError) ErrorName() string {
	return "UnregisterClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterClientResponseValidationError{}
