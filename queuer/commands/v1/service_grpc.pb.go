// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: queuer/commands/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommandsService_SubscribeToCommands_FullMethodName = "/queuer.commands.v1.CommandsService/SubscribeToCommands"
	CommandsService_AckCommand_FullMethodName          = "/queuer.commands.v1.CommandsService/AckCommand"
)

// CommandsServiceClient is the client API for CommandsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandsServiceClient interface {
	SubscribeToCommands(ctx context.Context, in *SubscribeToCommandsRequest, opts ...grpc.CallOption) (CommandsService_SubscribeToCommandsClient, error)
	AckCommand(ctx context.Context, in *AckCommandRequest, opts ...grpc.CallOption) (*AckCommandResponse, error)
}

type commandsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandsServiceClient(cc grpc.ClientConnInterface) CommandsServiceClient {
	return &commandsServiceClient{cc}
}

func (c *commandsServiceClient) SubscribeToCommands(ctx context.Context, in *SubscribeToCommandsRequest, opts ...grpc.CallOption) (CommandsService_SubscribeToCommandsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandsService_ServiceDesc.Streams[0], CommandsService_SubscribeToCommands_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &commandsServiceSubscribeToCommandsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandsService_SubscribeToCommandsClient interface {
	Recv() (*SubscribeToCommandsResponse, error)
	grpc.ClientStream
}

type commandsServiceSubscribeToCommandsClient struct {
	grpc.ClientStream
}

func (x *commandsServiceSubscribeToCommandsClient) Recv() (*SubscribeToCommandsResponse, error) {
	m := new(SubscribeToCommandsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commandsServiceClient) AckCommand(ctx context.Context, in *AckCommandRequest, opts ...grpc.CallOption) (*AckCommandResponse, error) {
	out := new(AckCommandResponse)
	err := c.cc.Invoke(ctx, CommandsService_AckCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandsServiceServer is the server API for CommandsService service.
// All implementations must embed UnimplementedCommandsServiceServer
// for forward compatibility
type CommandsServiceServer interface {
	SubscribeToCommands(*SubscribeToCommandsRequest, CommandsService_SubscribeToCommandsServer) error
	AckCommand(context.Context, *AckCommandRequest) (*AckCommandResponse, error)
	mustEmbedUnimplementedCommandsServiceServer()
}

// UnimplementedCommandsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandsServiceServer struct {
}

func (UnimplementedCommandsServiceServer) SubscribeToCommands(*SubscribeToCommandsRequest, CommandsService_SubscribeToCommandsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToCommands not implemented")
}
func (UnimplementedCommandsServiceServer) AckCommand(context.Context, *AckCommandRequest) (*AckCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckCommand not implemented")
}
func (UnimplementedCommandsServiceServer) mustEmbedUnimplementedCommandsServiceServer() {}

// UnsafeCommandsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandsServiceServer will
// result in compilation errors.
type UnsafeCommandsServiceServer interface {
	mustEmbedUnimplementedCommandsServiceServer()
}

func RegisterCommandsServiceServer(s grpc.ServiceRegistrar, srv CommandsServiceServer) {
	s.RegisterService(&CommandsService_ServiceDesc, srv)
}

func _CommandsService_SubscribeToCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToCommandsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandsServiceServer).SubscribeToCommands(m, &commandsServiceSubscribeToCommandsServer{stream})
}

type CommandsService_SubscribeToCommandsServer interface {
	Send(*SubscribeToCommandsResponse) error
	grpc.ServerStream
}

type commandsServiceSubscribeToCommandsServer struct {
	grpc.ServerStream
}

func (x *commandsServiceSubscribeToCommandsServer) Send(m *SubscribeToCommandsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CommandsService_AckCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandsServiceServer).AckCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandsService_AckCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandsServiceServer).AckCommand(ctx, req.(*AckCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandsService_ServiceDesc is the grpc.ServiceDesc for CommandsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queuer.commands.v1.CommandsService",
	HandlerType: (*CommandsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckCommand",
			Handler:    _CommandsService_AckCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToCommands",
			Handler:       _CommandsService_SubscribeToCommands_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "queuer/commands/v1/service.proto",
}
