// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: queuer/commands/v1/messages.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on SubscribeToCommandsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeToCommandsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeToCommandsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeToCommandsRequestMultiError, or nil if none found.
func (m *SubscribeToCommandsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeToCommandsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubscribeToCommandsRequestMultiError(errors)
	}

	return nil
}

// SubscribeToCommandsRequestMultiError is an error wrapping multiple
// validation errors returned by SubscribeToCommandsRequest.ValidateAll() if
// the designated constraints aren't met.
type SubscribeToCommandsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeToCommandsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeToCommandsRequestMultiError) AllErrors() []error { return m }

// SubscribeToCommandsRequestValidationError is the validation error returned
// by SubscribeToCommandsRequest.Validate if the designated constraints aren't met.
type SubscribeToCommandsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeToCommandsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeToCommandsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeToCommandsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeToCommandsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeToCommandsRequestValidationError) ErrorName() string {
	return "SubscribeToCommandsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeToCommandsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeToCommandsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeToCommandsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeToCommandsRequestValidationError{}

// Validate checks the field values on SubscribeToCommandsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeToCommandsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeToCommandsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeToCommandsResponseMultiError, or nil if none found.
func (m *SubscribeToCommandsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeToCommandsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommand()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeToCommandsResponseValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeToCommandsResponseValidationError{
					field:  "Command",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommand()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeToCommandsResponseValidationError{
				field:  "Command",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribeToCommandsResponseMultiError(errors)
	}

	return nil
}

// SubscribeToCommandsResponseMultiError is an error wrapping multiple
// validation errors returned by SubscribeToCommandsResponse.ValidateAll() if
// the designated constraints aren't met.
type SubscribeToCommandsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeToCommandsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeToCommandsResponseMultiError) AllErrors() []error { return m }

// SubscribeToCommandsResponseValidationError is the validation error returned
// by SubscribeToCommandsResponse.Validate if the designated constraints
// aren't met.
type SubscribeToCommandsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeToCommandsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeToCommandsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeToCommandsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeToCommandsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeToCommandsResponseValidationError) ErrorName() string {
	return "SubscribeToCommandsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeToCommandsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeToCommandsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeToCommandsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeToCommandsResponseValidationError{}

// Validate checks the field values on CreateCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommandRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommandRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommandRequestMultiError, or nil if none found.
func (m *CreateCommandRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommandRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = CreateCommandRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommandRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommandRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommandRequestValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommandRequestMultiError(errors)
	}

	return nil
}

func (m *CreateCommandRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateCommandRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommandRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommandRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommandRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommandRequestMultiError) AllErrors() []error { return m }

// CreateCommandRequestValidationError is the validation error returned by
// CreateCommandRequest.Validate if the designated constraints aren't met.
type CreateCommandRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommandRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommandRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommandRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommandRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommandRequestValidationError) ErrorName() string {
	return "CreateCommandRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommandRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommandRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommandRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommandRequestValidationError{}

// Validate checks the field values on CreateCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommandResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommandResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommandResponseMultiError, or nil if none found.
func (m *CreateCommandResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommandResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommandResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommandResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommandResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommandResponseMultiError(errors)
	}

	return nil
}

// CreateCommandResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommandResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommandResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommandResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommandResponseMultiError) AllErrors() []error { return m }

// CreateCommandResponseValidationError is the validation error returned by
// CreateCommandResponse.Validate if the designated constraints aren't met.
type CreateCommandResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommandResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommandResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommandResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommandResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommandResponseValidationError) ErrorName() string {
	return "CreateCommandResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommandResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommandResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommandResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommandResponseValidationError{}

// Validate checks the field values on AcknowledgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcknowledgeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcknowledgeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcknowledgeRequestMultiError, or nil if none found.
func (m *AcknowledgeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AcknowledgeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCommandId()); err != nil {
		err = AcknowledgeRequestValidationError{
			field:  "CommandId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Payload

	if len(errors) > 0 {
		return AcknowledgeRequestMultiError(errors)
	}

	return nil
}

func (m *AcknowledgeRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AcknowledgeRequestMultiError is an error wrapping multiple validation errors
// returned by AcknowledgeRequest.ValidateAll() if the designated constraints
// aren't met.
type AcknowledgeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcknowledgeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcknowledgeRequestMultiError) AllErrors() []error { return m }

// AcknowledgeRequestValidationError is the validation error returned by
// AcknowledgeRequest.Validate if the designated constraints aren't met.
type AcknowledgeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcknowledgeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcknowledgeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcknowledgeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcknowledgeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcknowledgeRequestValidationError) ErrorName() string {
	return "AcknowledgeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcknowledgeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcknowledgeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcknowledgeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcknowledgeRequestValidationError{}

// Validate checks the field values on AcknowledgeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AcknowledgeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AcknowledgeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AcknowledgeResponseMultiError, or nil if none found.
func (m *AcknowledgeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AcknowledgeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AcknowledgeResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AcknowledgeResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AcknowledgeResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AcknowledgeResponseMultiError(errors)
	}

	return nil
}

// AcknowledgeResponseMultiError is an error wrapping multiple validation
// errors returned by AcknowledgeResponse.ValidateAll() if the designated
// constraints aren't met.
type AcknowledgeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AcknowledgeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AcknowledgeResponseMultiError) AllErrors() []error { return m }

// AcknowledgeResponseValidationError is the validation error returned by
// AcknowledgeResponse.Validate if the designated constraints aren't met.
type AcknowledgeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcknowledgeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcknowledgeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcknowledgeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcknowledgeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcknowledgeResponseValidationError) ErrorName() string {
	return "AcknowledgeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcknowledgeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcknowledgeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcknowledgeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcknowledgeResponseValidationError{}
