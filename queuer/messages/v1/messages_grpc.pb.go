// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: queuer/messages/v1/messages.proto

package v1

import (
	context "context"
	v1 "github.com/gsols/goproto/queuer/entities/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_ConfirmMessage_FullMethodName = "/queuer.messages.v1.MessageService/ConfirmMessage"
	MessageService_GetMessages_FullMethodName    = "/queuer.messages.v1.MessageService/GetMessages"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	ConfirmMessage(ctx context.Context, in *ConfirmMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMessages(ctx context.Context, opts ...grpc.CallOption) (MessageService_GetMessagesClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) ConfirmMessage(ctx context.Context, in *ConfirmMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MessageService_ConfirmMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetMessages(ctx context.Context, opts ...grpc.CallOption) (MessageService_GetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_GetMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceGetMessagesClient{stream}
	return x, nil
}

type MessageService_GetMessagesClient interface {
	Send(*GetMessagesRequest) error
	Recv() (*v1.Message, error)
	grpc.ClientStream
}

type messageServiceGetMessagesClient struct {
	grpc.ClientStream
}

func (x *messageServiceGetMessagesClient) Send(m *GetMessagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceGetMessagesClient) Recv() (*v1.Message, error) {
	m := new(v1.Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	ConfirmMessage(context.Context, *ConfirmMessageRequest) (*emptypb.Empty, error)
	GetMessages(MessageService_GetMessagesServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) ConfirmMessage(context.Context, *ConfirmMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmMessage not implemented")
}
func (UnimplementedMessageServiceServer) GetMessages(MessageService_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_ConfirmMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ConfirmMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_ConfirmMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ConfirmMessage(ctx, req.(*ConfirmMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).GetMessages(&messageServiceGetMessagesServer{stream})
}

type MessageService_GetMessagesServer interface {
	Send(*v1.Message) error
	Recv() (*GetMessagesRequest, error)
	grpc.ServerStream
}

type messageServiceGetMessagesServer struct {
	grpc.ServerStream
}

func (x *messageServiceGetMessagesServer) Send(m *v1.Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceGetMessagesServer) Recv() (*GetMessagesRequest, error) {
	m := new(GetMessagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queuer.messages.v1.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmMessage",
			Handler:    _MessageService_ConfirmMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _MessageService_GetMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "queuer/messages/v1/messages.proto",
}
