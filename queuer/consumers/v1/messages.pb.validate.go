// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: queuer/consumers/v1/messages.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterConsumerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterConsumerRequestMultiError, or nil if none found.
func (m *RegisterConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConsumer() == nil {
		err := RegisterConsumerRequestValidationError{
			field:  "Consumer",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterConsumerRequestValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterConsumerRequestValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := len(m.GetPublicKey()); l < 1 || l > 4096 {
		err := RegisterConsumerRequestValidationError{
			field:  "PublicKey",
			reason: "value length must be between 1 and 4096 bytes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterConsumerRequestMultiError(errors)
	}

	return nil
}

// RegisterConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterConsumerRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterConsumerRequestMultiError) AllErrors() []error { return m }

// RegisterConsumerRequestValidationError is the validation error returned by
// RegisterConsumerRequest.Validate if the designated constraints aren't met.
type RegisterConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterConsumerRequestValidationError) ErrorName() string {
	return "RegisterConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterConsumerRequestValidationError{}

// Validate checks the field values on RegisterConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterConsumerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterConsumerResponseMultiError, or nil if none found.
func (m *RegisterConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterConsumerResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterConsumerResponseMultiError(errors)
	}

	return nil
}

// RegisterConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterConsumerResponseMultiError) AllErrors() []error { return m }

// RegisterConsumerResponseValidationError is the validation error returned by
// RegisterConsumerResponse.Validate if the designated constraints aren't met.
type RegisterConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterConsumerResponseValidationError) ErrorName() string {
	return "RegisterConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterConsumerResponseValidationError{}

// Validate checks the field values on GetConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerRequestMultiError, or nil if none found.
func (m *GetConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = GetConsumerRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConsumerRequestMultiError(errors)
	}

	return nil
}

func (m *GetConsumerRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetConsumerRequestMultiError is an error wrapping multiple validation errors
// returned by GetConsumerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerRequestMultiError) AllErrors() []error { return m }

// GetConsumerRequestValidationError is the validation error returned by
// GetConsumerRequest.Validate if the designated constraints aren't met.
type GetConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerRequestValidationError) ErrorName() string {
	return "GetConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerRequestValidationError{}

// Validate checks the field values on GetConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerResponseMultiError, or nil if none found.
func (m *GetConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsumer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetConsumerResponseValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetConsumerResponseValidationError{
					field:  "Consumer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsumer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetConsumerResponseValidationError{
				field:  "Consumer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetConsumerResponseMultiError(errors)
	}

	return nil
}

// GetConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerResponseMultiError) AllErrors() []error { return m }

// GetConsumerResponseValidationError is the validation error returned by
// GetConsumerResponse.Validate if the designated constraints aren't met.
type GetConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerResponseValidationError) ErrorName() string {
	return "GetConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerResponseValidationError{}

// Validate checks the field values on GetUnauthorizedConsumersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUnauthorizedConsumersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnauthorizedConsumersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUnauthorizedConsumersRequestMultiError, or nil if none found.
func (m *GetUnauthorizedConsumersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnauthorizedConsumersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetUnauthorizedConsumersRequestMultiError(errors)
	}

	return nil
}

// GetUnauthorizedConsumersRequestMultiError is an error wrapping multiple
// validation errors returned by GetUnauthorizedConsumersRequest.ValidateAll()
// if the designated constraints aren't met.
type GetUnauthorizedConsumersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnauthorizedConsumersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnauthorizedConsumersRequestMultiError) AllErrors() []error { return m }

// GetUnauthorizedConsumersRequestValidationError is the validation error
// returned by GetUnauthorizedConsumersRequest.Validate if the designated
// constraints aren't met.
type GetUnauthorizedConsumersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnauthorizedConsumersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnauthorizedConsumersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnauthorizedConsumersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnauthorizedConsumersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnauthorizedConsumersRequestValidationError) ErrorName() string {
	return "GetUnauthorizedConsumersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnauthorizedConsumersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnauthorizedConsumersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnauthorizedConsumersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnauthorizedConsumersRequestValidationError{}

// Validate checks the field values on GetUnauthorizedConsumersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetUnauthorizedConsumersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUnauthorizedConsumersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetUnauthorizedConsumersResponseMultiError, or nil if none found.
func (m *GetUnauthorizedConsumersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUnauthorizedConsumersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConsumers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUnauthorizedConsumersResponseValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUnauthorizedConsumersResponseValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUnauthorizedConsumersResponseValidationError{
					field:  fmt.Sprintf("Consumers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUnauthorizedConsumersResponseMultiError(errors)
	}

	return nil
}

// GetUnauthorizedConsumersResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetUnauthorizedConsumersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUnauthorizedConsumersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUnauthorizedConsumersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUnauthorizedConsumersResponseMultiError) AllErrors() []error { return m }

// GetUnauthorizedConsumersResponseValidationError is the validation error
// returned by GetUnauthorizedConsumersResponse.Validate if the designated
// constraints aren't met.
type GetUnauthorizedConsumersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUnauthorizedConsumersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUnauthorizedConsumersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUnauthorizedConsumersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUnauthorizedConsumersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUnauthorizedConsumersResponseValidationError) ErrorName() string {
	return "GetUnauthorizedConsumersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUnauthorizedConsumersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUnauthorizedConsumersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUnauthorizedConsumersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUnauthorizedConsumersResponseValidationError{}

// Validate checks the field values on GetAuthorizedConsumersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorizedConsumersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorizedConsumersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAuthorizedConsumersRequestMultiError, or nil if none found.
func (m *GetAuthorizedConsumersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorizedConsumersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAuthorizedConsumersRequestMultiError(errors)
	}

	return nil
}

// GetAuthorizedConsumersRequestMultiError is an error wrapping multiple
// validation errors returned by GetAuthorizedConsumersRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAuthorizedConsumersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorizedConsumersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorizedConsumersRequestMultiError) AllErrors() []error { return m }

// GetAuthorizedConsumersRequestValidationError is the validation error
// returned by GetAuthorizedConsumersRequest.Validate if the designated
// constraints aren't met.
type GetAuthorizedConsumersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorizedConsumersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorizedConsumersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorizedConsumersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorizedConsumersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorizedConsumersRequestValidationError) ErrorName() string {
	return "GetAuthorizedConsumersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorizedConsumersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorizedConsumersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorizedConsumersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorizedConsumersRequestValidationError{}

// Validate checks the field values on GetAuthorizedConsumersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthorizedConsumersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthorizedConsumersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAuthorizedConsumersResponseMultiError, or nil if none found.
func (m *GetAuthorizedConsumersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthorizedConsumersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConsumers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAuthorizedConsumersResponseValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAuthorizedConsumersResponseValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAuthorizedConsumersResponseValidationError{
					field:  fmt.Sprintf("Consumers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAuthorizedConsumersResponseMultiError(errors)
	}

	return nil
}

// GetAuthorizedConsumersResponseMultiError is an error wrapping multiple
// validation errors returned by GetAuthorizedConsumersResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAuthorizedConsumersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthorizedConsumersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthorizedConsumersResponseMultiError) AllErrors() []error { return m }

// GetAuthorizedConsumersResponseValidationError is the validation error
// returned by GetAuthorizedConsumersResponse.Validate if the designated
// constraints aren't met.
type GetAuthorizedConsumersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthorizedConsumersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthorizedConsumersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthorizedConsumersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthorizedConsumersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthorizedConsumersResponseValidationError) ErrorName() string {
	return "GetAuthorizedConsumersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthorizedConsumersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthorizedConsumersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthorizedConsumersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthorizedConsumersResponseValidationError{}

// Validate checks the field values on AuthorizeConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeConsumerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeConsumerRequestMultiError, or nil if none found.
func (m *AuthorizeConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = AuthorizeConsumerRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = AuthorizeConsumerRequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthorizeConsumerRequestMultiError(errors)
	}

	return nil
}

func (m *AuthorizeConsumerRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// AuthorizeConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by AuthorizeConsumerRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthorizeConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeConsumerRequestMultiError) AllErrors() []error { return m }

// AuthorizeConsumerRequestValidationError is the validation error returned by
// AuthorizeConsumerRequest.Validate if the designated constraints aren't met.
type AuthorizeConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeConsumerRequestValidationError) ErrorName() string {
	return "AuthorizeConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeConsumerRequestValidationError{}

// Validate checks the field values on AuthorizeConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthorizeConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeConsumerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthorizeConsumerResponseMultiError, or nil if none found.
func (m *AuthorizeConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthorizeConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthorizeConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthorizeConsumerResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthorizeConsumerResponseMultiError(errors)
	}

	return nil
}

// AuthorizeConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by AuthorizeConsumerResponse.ValidateAll() if the
// designated constraints aren't met.
type AuthorizeConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeConsumerResponseMultiError) AllErrors() []error { return m }

// AuthorizeConsumerResponseValidationError is the validation error returned by
// AuthorizeConsumerResponse.Validate if the designated constraints aren't met.
type AuthorizeConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeConsumerResponseValidationError) ErrorName() string {
	return "AuthorizeConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeConsumerResponseValidationError{}

// Validate checks the field values on DeauthorizeConsumerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeauthorizeConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeauthorizeConsumerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeauthorizeConsumerRequestMultiError, or nil if none found.
func (m *DeauthorizeConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeauthorizeConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = DeauthorizeConsumerRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeauthorizeConsumerRequestMultiError(errors)
	}

	return nil
}

func (m *DeauthorizeConsumerRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeauthorizeConsumerRequestMultiError is an error wrapping multiple
// validation errors returned by DeauthorizeConsumerRequest.ValidateAll() if
// the designated constraints aren't met.
type DeauthorizeConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeauthorizeConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeauthorizeConsumerRequestMultiError) AllErrors() []error { return m }

// DeauthorizeConsumerRequestValidationError is the validation error returned
// by DeauthorizeConsumerRequest.Validate if the designated constraints aren't met.
type DeauthorizeConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeauthorizeConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeauthorizeConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeauthorizeConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeauthorizeConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeauthorizeConsumerRequestValidationError) ErrorName() string {
	return "DeauthorizeConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeauthorizeConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeauthorizeConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeauthorizeConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeauthorizeConsumerRequestValidationError{}

// Validate checks the field values on DeauthorizeConsumerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeauthorizeConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeauthorizeConsumerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeauthorizeConsumerResponseMultiError, or nil if none found.
func (m *DeauthorizeConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeauthorizeConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeauthorizeConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeauthorizeConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeauthorizeConsumerResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeauthorizeConsumerResponseMultiError(errors)
	}

	return nil
}

// DeauthorizeConsumerResponseMultiError is an error wrapping multiple
// validation errors returned by DeauthorizeConsumerResponse.ValidateAll() if
// the designated constraints aren't met.
type DeauthorizeConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeauthorizeConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeauthorizeConsumerResponseMultiError) AllErrors() []error { return m }

// DeauthorizeConsumerResponseValidationError is the validation error returned
// by DeauthorizeConsumerResponse.Validate if the designated constraints
// aren't met.
type DeauthorizeConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeauthorizeConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeauthorizeConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeauthorizeConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeauthorizeConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeauthorizeConsumerResponseValidationError) ErrorName() string {
	return "DeauthorizeConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeauthorizeConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeauthorizeConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeauthorizeConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeauthorizeConsumerResponseValidationError{}

// Validate checks the field values on RetrieveConsumerCredentialsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveConsumerCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveConsumerCredentialsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RetrieveConsumerCredentialsRequestMultiError, or nil if none found.
func (m *RetrieveConsumerCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveConsumerCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = RetrieveConsumerCredentialsRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RetrieveConsumerCredentialsRequestMultiError(errors)
	}

	return nil
}

func (m *RetrieveConsumerCredentialsRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RetrieveConsumerCredentialsRequestMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveConsumerCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type RetrieveConsumerCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveConsumerCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveConsumerCredentialsRequestMultiError) AllErrors() []error { return m }

// RetrieveConsumerCredentialsRequestValidationError is the validation error
// returned by RetrieveConsumerCredentialsRequest.Validate if the designated
// constraints aren't met.
type RetrieveConsumerCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveConsumerCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveConsumerCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveConsumerCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveConsumerCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveConsumerCredentialsRequestValidationError) ErrorName() string {
	return "RetrieveConsumerCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveConsumerCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveConsumerCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveConsumerCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveConsumerCredentialsRequestValidationError{}

// Validate checks the field values on RetrieveConsumerCredentialsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveConsumerCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveConsumerCredentialsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RetrieveConsumerCredentialsResponseMultiError, or nil if none found.
func (m *RetrieveConsumerCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveConsumerCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Credentials

	if len(errors) > 0 {
		return RetrieveConsumerCredentialsResponseMultiError(errors)
	}

	return nil
}

// RetrieveConsumerCredentialsResponseMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveConsumerCredentialsResponse.ValidateAll() if the designated
// constraints aren't met.
type RetrieveConsumerCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveConsumerCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveConsumerCredentialsResponseMultiError) AllErrors() []error { return m }

// RetrieveConsumerCredentialsResponseValidationError is the validation error
// returned by RetrieveConsumerCredentialsResponse.Validate if the designated
// constraints aren't met.
type RetrieveConsumerCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveConsumerCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveConsumerCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveConsumerCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveConsumerCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveConsumerCredentialsResponseValidationError) ErrorName() string {
	return "RetrieveConsumerCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveConsumerCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveConsumerCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveConsumerCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveConsumerCredentialsResponseValidationError{}

// Validate checks the field values on PublishConsumerStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishConsumerStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishConsumerStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishConsumerStatsRequestMultiError, or nil if none found.
func (m *PublishConsumerStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishConsumerStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = PublishConsumerStatsRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishConsumerStatsRequestValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishConsumerStatsRequestValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishConsumerStatsRequestValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishConsumerStatsRequestMultiError(errors)
	}

	return nil
}

func (m *PublishConsumerStatsRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PublishConsumerStatsRequestMultiError is an error wrapping multiple
// validation errors returned by PublishConsumerStatsRequest.ValidateAll() if
// the designated constraints aren't met.
type PublishConsumerStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishConsumerStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishConsumerStatsRequestMultiError) AllErrors() []error { return m }

// PublishConsumerStatsRequestValidationError is the validation error returned
// by PublishConsumerStatsRequest.Validate if the designated constraints
// aren't met.
type PublishConsumerStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishConsumerStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishConsumerStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishConsumerStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishConsumerStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishConsumerStatsRequestValidationError) ErrorName() string {
	return "PublishConsumerStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishConsumerStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishConsumerStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishConsumerStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishConsumerStatsRequestValidationError{}

// Validate checks the field values on PublishConsumerStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishConsumerStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishConsumerStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishConsumerStatsResponseMultiError, or nil if none found.
func (m *PublishConsumerStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishConsumerStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishConsumerStatsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishConsumerStatsResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishConsumerStatsResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishConsumerStatsResponseMultiError(errors)
	}

	return nil
}

// PublishConsumerStatsResponseMultiError is an error wrapping multiple
// validation errors returned by PublishConsumerStatsResponse.ValidateAll() if
// the designated constraints aren't met.
type PublishConsumerStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishConsumerStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishConsumerStatsResponseMultiError) AllErrors() []error { return m }

// PublishConsumerStatsResponseValidationError is the validation error returned
// by PublishConsumerStatsResponse.Validate if the designated constraints
// aren't met.
type PublishConsumerStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishConsumerStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishConsumerStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishConsumerStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishConsumerStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishConsumerStatsResponseValidationError) ErrorName() string {
	return "PublishConsumerStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishConsumerStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishConsumerStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishConsumerStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishConsumerStatsResponseValidationError{}

// Validate checks the field values on GetSubscribedStreamsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribedStreamsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribedStreamsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscribedStreamsRequestMultiError, or nil if none found.
func (m *GetSubscribedStreamsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribedStreamsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = GetSubscribedStreamsRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSubscribedStreamsRequestMultiError(errors)
	}

	return nil
}

func (m *GetSubscribedStreamsRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetSubscribedStreamsRequestMultiError is an error wrapping multiple
// validation errors returned by GetSubscribedStreamsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetSubscribedStreamsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribedStreamsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribedStreamsRequestMultiError) AllErrors() []error { return m }

// GetSubscribedStreamsRequestValidationError is the validation error returned
// by GetSubscribedStreamsRequest.Validate if the designated constraints
// aren't met.
type GetSubscribedStreamsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribedStreamsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribedStreamsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribedStreamsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribedStreamsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribedStreamsRequestValidationError) ErrorName() string {
	return "GetSubscribedStreamsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribedStreamsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribedStreamsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribedStreamsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribedStreamsRequestValidationError{}

// Validate checks the field values on GetSubscribedStreamsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSubscribedStreamsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSubscribedStreamsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSubscribedStreamsResponseMultiError, or nil if none found.
func (m *GetSubscribedStreamsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSubscribedStreamsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSubscribedStreamsResponseValidationError{
						field:  fmt.Sprintf("Streams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSubscribedStreamsResponseValidationError{
						field:  fmt.Sprintf("Streams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSubscribedStreamsResponseValidationError{
					field:  fmt.Sprintf("Streams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSubscribedStreamsResponseMultiError(errors)
	}

	return nil
}

// GetSubscribedStreamsResponseMultiError is an error wrapping multiple
// validation errors returned by GetSubscribedStreamsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetSubscribedStreamsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSubscribedStreamsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSubscribedStreamsResponseMultiError) AllErrors() []error { return m }

// GetSubscribedStreamsResponseValidationError is the validation error returned
// by GetSubscribedStreamsResponse.Validate if the designated constraints
// aren't met.
type GetSubscribedStreamsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubscribedStreamsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubscribedStreamsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubscribedStreamsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubscribedStreamsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubscribedStreamsResponseValidationError) ErrorName() string {
	return "GetSubscribedStreamsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubscribedStreamsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubscribedStreamsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubscribedStreamsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubscribedStreamsResponseValidationError{}

// Validate checks the field values on GetConsumerStreamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerStreamsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerStreamsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerStreamsRequestMultiError, or nil if none found.
func (m *GetConsumerStreamsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerStreamsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = GetConsumerStreamsRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConsumerStreamsRequestMultiError(errors)
	}

	return nil
}

func (m *GetConsumerStreamsRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetConsumerStreamsRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumerStreamsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetConsumerStreamsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerStreamsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerStreamsRequestMultiError) AllErrors() []error { return m }

// GetConsumerStreamsRequestValidationError is the validation error returned by
// GetConsumerStreamsRequest.Validate if the designated constraints aren't met.
type GetConsumerStreamsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerStreamsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerStreamsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerStreamsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerStreamsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerStreamsRequestValidationError) ErrorName() string {
	return "GetConsumerStreamsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerStreamsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerStreamsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerStreamsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerStreamsRequestValidationError{}

// Validate checks the field values on GetConsumerStreamsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumerStreamsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumerStreamsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumerStreamsResponseMultiError, or nil if none found.
func (m *GetConsumerStreamsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumerStreamsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStreams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumerStreamsResponseValidationError{
						field:  fmt.Sprintf("Streams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumerStreamsResponseValidationError{
						field:  fmt.Sprintf("Streams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumerStreamsResponseValidationError{
					field:  fmt.Sprintf("Streams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConsumerStreamsResponseMultiError(errors)
	}

	return nil
}

// GetConsumerStreamsResponseMultiError is an error wrapping multiple
// validation errors returned by GetConsumerStreamsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetConsumerStreamsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumerStreamsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumerStreamsResponseMultiError) AllErrors() []error { return m }

// GetConsumerStreamsResponseValidationError is the validation error returned
// by GetConsumerStreamsResponse.Validate if the designated constraints aren't met.
type GetConsumerStreamsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumerStreamsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumerStreamsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumerStreamsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumerStreamsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumerStreamsResponseValidationError) ErrorName() string {
	return "GetConsumerStreamsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumerStreamsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumerStreamsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumerStreamsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumerStreamsResponseValidationError{}
