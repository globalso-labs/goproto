// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: queuer/streams/v1/messages.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "github.com/gsols/goproto/queuer/entities/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.StreamState(0)
)

// define the regex for a UUID once up-front
var _messages_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStreamRequestMultiError, or nil if none found.
func (m *CreateStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := CreateStreamRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetOwnerId()); err != nil {
		err = CreateStreamRequestValidationError{
			field:  "OwnerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateStreamRequestMultiError(errors)
	}

	return nil
}

func (m *CreateStreamRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateStreamRequestMultiError is an error wrapping multiple validation
// errors returned by CreateStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStreamRequestMultiError) AllErrors() []error { return m }

// CreateStreamRequestValidationError is the validation error returned by
// CreateStreamRequest.Validate if the designated constraints aren't met.
type CreateStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStreamRequestValidationError) ErrorName() string {
	return "CreateStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStreamRequestValidationError{}

// Validate checks the field values on CreateStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStreamResponseMultiError, or nil if none found.
func (m *CreateStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStream()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateStreamResponseValidationError{
					field:  "Stream",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateStreamResponseValidationError{
					field:  "Stream",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStream()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateStreamResponseValidationError{
				field:  "Stream",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateStreamResponseMultiError(errors)
	}

	return nil
}

// CreateStreamResponseMultiError is an error wrapping multiple validation
// errors returned by CreateStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStreamResponseMultiError) AllErrors() []error { return m }

// CreateStreamResponseValidationError is the validation error returned by
// CreateStreamResponse.Validate if the designated constraints aren't met.
type CreateStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStreamResponseValidationError) ErrorName() string {
	return "CreateStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStreamResponseValidationError{}

// Validate checks the field values on GetStreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStreamRequestMultiError, or nil if none found.
func (m *GetStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = GetStreamRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetStreamRequestMultiError(errors)
	}

	return nil
}

func (m *GetStreamRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetStreamRequestMultiError is an error wrapping multiple validation errors
// returned by GetStreamRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStreamRequestMultiError) AllErrors() []error { return m }

// GetStreamRequestValidationError is the validation error returned by
// GetStreamRequest.Validate if the designated constraints aren't met.
type GetStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStreamRequestValidationError) ErrorName() string { return "GetStreamRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStreamRequestValidationError{}

// Validate checks the field values on GetStreamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStreamResponseMultiError, or nil if none found.
func (m *GetStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStream()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStreamResponseValidationError{
					field:  "Stream",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStreamResponseValidationError{
					field:  "Stream",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStream()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStreamResponseValidationError{
				field:  "Stream",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStreamResponseMultiError(errors)
	}

	return nil
}

// GetStreamResponseMultiError is an error wrapping multiple validation errors
// returned by GetStreamResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStreamResponseMultiError) AllErrors() []error { return m }

// GetStreamResponseValidationError is the validation error returned by
// GetStreamResponse.Validate if the designated constraints aren't met.
type GetStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStreamResponseValidationError) ErrorName() string {
	return "GetStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStreamResponseValidationError{}

// Validate checks the field values on FlushStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlushStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlushStreamRequestMultiError, or nil if none found.
func (m *FlushStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = FlushStreamRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FlushStreamRequestMultiError(errors)
	}

	return nil
}

func (m *FlushStreamRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// FlushStreamRequestMultiError is an error wrapping multiple validation errors
// returned by FlushStreamRequest.ValidateAll() if the designated constraints
// aren't met.
type FlushStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushStreamRequestMultiError) AllErrors() []error { return m }

// FlushStreamRequestValidationError is the validation error returned by
// FlushStreamRequest.Validate if the designated constraints aren't met.
type FlushStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushStreamRequestValidationError) ErrorName() string {
	return "FlushStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FlushStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushStreamRequestValidationError{}

// Validate checks the field values on FlushStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlushStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlushStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlushStreamResponseMultiError, or nil if none found.
func (m *FlushStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FlushStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlushStreamResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlushStreamResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlushStreamResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FlushStreamResponseMultiError(errors)
	}

	return nil
}

// FlushStreamResponseMultiError is an error wrapping multiple validation
// errors returned by FlushStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type FlushStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlushStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlushStreamResponseMultiError) AllErrors() []error { return m }

// FlushStreamResponseValidationError is the validation error returned by
// FlushStreamResponse.Validate if the designated constraints aren't met.
type FlushStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlushStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlushStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlushStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlushStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlushStreamResponseValidationError) ErrorName() string {
	return "FlushStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FlushStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlushStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlushStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlushStreamResponseValidationError{}

// Validate checks the field values on DeleteStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStreamRequestMultiError, or nil if none found.
func (m *DeleteStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = DeleteStreamRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteStreamRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteStreamRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteStreamRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStreamRequestMultiError) AllErrors() []error { return m }

// DeleteStreamRequestValidationError is the validation error returned by
// DeleteStreamRequest.Validate if the designated constraints aren't met.
type DeleteStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStreamRequestValidationError) ErrorName() string {
	return "DeleteStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStreamRequestValidationError{}

// Validate checks the field values on DeleteStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteStreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStreamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStreamResponseMultiError, or nil if none found.
func (m *DeleteStreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteStreamResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteStreamResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteStreamResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteStreamResponseMultiError(errors)
	}

	return nil
}

// DeleteStreamResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteStreamResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteStreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStreamResponseMultiError) AllErrors() []error { return m }

// DeleteStreamResponseValidationError is the validation error returned by
// DeleteStreamResponse.Validate if the designated constraints aren't met.
type DeleteStreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStreamResponseValidationError) ErrorName() string {
	return "DeleteStreamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteStreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStreamResponseValidationError{}

// Validate checks the field values on PublishMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishMessageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishMessageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishMessageRequestMultiError, or nil if none found.
func (m *PublishMessageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishMessageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = PublishMessageRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishMessageRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishMessageRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PublishMessageRequestMultiError(errors)
	}

	return nil
}

func (m *PublishMessageRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PublishMessageRequestMultiError is an error wrapping multiple validation
// errors returned by PublishMessageRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishMessageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishMessageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishMessageRequestMultiError) AllErrors() []error { return m }

// PublishMessageRequestValidationError is the validation error returned by
// PublishMessageRequest.Validate if the designated constraints aren't met.
type PublishMessageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishMessageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishMessageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishMessageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishMessageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishMessageRequestValidationError) ErrorName() string {
	return "PublishMessageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishMessageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishMessageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishMessageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishMessageRequestValidationError{}

// Validate checks the field values on PublishMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishMessageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishMessageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishMessageResponseMultiError, or nil if none found.
func (m *PublishMessageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishMessageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetMessageId()); err != nil {
		err = PublishMessageResponseValidationError{
			field:  "MessageId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PublishMessageResponseMultiError(errors)
	}

	return nil
}

func (m *PublishMessageResponse) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// PublishMessageResponseMultiError is an error wrapping multiple validation
// errors returned by PublishMessageResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishMessageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishMessageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishMessageResponseMultiError) AllErrors() []error { return m }

// PublishMessageResponseValidationError is the validation error returned by
// PublishMessageResponse.Validate if the designated constraints aren't met.
type PublishMessageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishMessageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishMessageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishMessageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishMessageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishMessageResponseValidationError) ErrorName() string {
	return "PublishMessageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishMessageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishMessageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishMessageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishMessageResponseValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = SubscribeRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

func (m *SubscribeRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on SubscribeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeResponseMultiError, or nil if none found.
func (m *SubscribeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeResponseValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeResponseValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribeResponseMultiError(errors)
	}

	return nil
}

// SubscribeResponseMultiError is an error wrapping multiple validation errors
// returned by SubscribeResponse.ValidateAll() if the designated constraints
// aren't met.
type SubscribeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeResponseMultiError) AllErrors() []error { return m }

// SubscribeResponseValidationError is the validation error returned by
// SubscribeResponse.Validate if the designated constraints aren't met.
type SubscribeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeResponseValidationError) ErrorName() string {
	return "SubscribeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeResponseValidationError{}

// Validate checks the field values on UpdateStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStateRequestMultiError, or nil if none found.
func (m *UpdateStateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = UpdateStateRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for State

	if len(errors) > 0 {
		return UpdateStateRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateStateRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateStateRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateStateRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateStateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStateRequestMultiError) AllErrors() []error { return m }

// UpdateStateRequestValidationError is the validation error returned by
// UpdateStateRequest.Validate if the designated constraints aren't met.
type UpdateStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStateRequestValidationError) ErrorName() string {
	return "UpdateStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStateRequestValidationError{}

// Validate checks the field values on UpdateStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStateResponseMultiError, or nil if none found.
func (m *UpdateStateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStateResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStateResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStateResponseMultiError(errors)
	}

	return nil
}

// UpdateStateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStateResponseMultiError) AllErrors() []error { return m }

// UpdateStateResponseValidationError is the validation error returned by
// UpdateStateResponse.Validate if the designated constraints aren't met.
type UpdateStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStateResponseValidationError) ErrorName() string {
	return "UpdateStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStateResponseValidationError{}

// Validate checks the field values on RegisterConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterConsumerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterConsumerRequestMultiError, or nil if none found.
func (m *RegisterConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = RegisterConsumerRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = RegisterConsumerRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterConsumerRequestMultiError(errors)
	}

	return nil
}

func (m *RegisterConsumerRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// RegisterConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterConsumerRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterConsumerRequestMultiError) AllErrors() []error { return m }

// RegisterConsumerRequestValidationError is the validation error returned by
// RegisterConsumerRequest.Validate if the designated constraints aren't met.
type RegisterConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterConsumerRequestValidationError) ErrorName() string {
	return "RegisterConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterConsumerRequestValidationError{}

// Validate checks the field values on RegisterConsumerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterConsumerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterConsumerResponseMultiError, or nil if none found.
func (m *RegisterConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterConsumerResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterConsumerResponseMultiError(errors)
	}

	return nil
}

// RegisterConsumerResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterConsumerResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterConsumerResponseMultiError) AllErrors() []error { return m }

// RegisterConsumerResponseValidationError is the validation error returned by
// RegisterConsumerResponse.Validate if the designated constraints aren't met.
type RegisterConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterConsumerResponseValidationError) ErrorName() string {
	return "RegisterConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterConsumerResponseValidationError{}

// Validate checks the field values on GetConsumersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumersRequestMultiError, or nil if none found.
func (m *GetConsumersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = GetConsumersRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetConsumersRequestMultiError(errors)
	}

	return nil
}

func (m *GetConsumersRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetConsumersRequestMultiError is an error wrapping multiple validation
// errors returned by GetConsumersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetConsumersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumersRequestMultiError) AllErrors() []error { return m }

// GetConsumersRequestValidationError is the validation error returned by
// GetConsumersRequest.Validate if the designated constraints aren't met.
type GetConsumersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumersRequestValidationError) ErrorName() string {
	return "GetConsumersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumersRequestValidationError{}

// Validate checks the field values on GetConsumersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetConsumersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetConsumersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetConsumersResponseMultiError, or nil if none found.
func (m *GetConsumersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetConsumersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConsumers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetConsumersResponseValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetConsumersResponseValidationError{
						field:  fmt.Sprintf("Consumers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetConsumersResponseValidationError{
					field:  fmt.Sprintf("Consumers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetConsumersResponseMultiError(errors)
	}

	return nil
}

// GetConsumersResponseMultiError is an error wrapping multiple validation
// errors returned by GetConsumersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetConsumersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetConsumersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetConsumersResponseMultiError) AllErrors() []error { return m }

// GetConsumersResponseValidationError is the validation error returned by
// GetConsumersResponse.Validate if the designated constraints aren't met.
type GetConsumersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetConsumersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetConsumersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetConsumersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetConsumersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetConsumersResponseValidationError) ErrorName() string {
	return "GetConsumersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetConsumersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetConsumersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetConsumersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetConsumersResponseValidationError{}

// Validate checks the field values on UnregisterConsumerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterConsumerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterConsumerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterConsumerRequestMultiError, or nil if none found.
func (m *UnregisterConsumerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterConsumerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetStreamId()); err != nil {
		err = UnregisterConsumerRequestValidationError{
			field:  "StreamId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetConsumerId()); err != nil {
		err = UnregisterConsumerRequestValidationError{
			field:  "ConsumerId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnregisterConsumerRequestMultiError(errors)
	}

	return nil
}

func (m *UnregisterConsumerRequest) _validateUuid(uuid string) error {
	if matched := _messages_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UnregisterConsumerRequestMultiError is an error wrapping multiple validation
// errors returned by UnregisterConsumerRequest.ValidateAll() if the
// designated constraints aren't met.
type UnregisterConsumerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterConsumerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterConsumerRequestMultiError) AllErrors() []error { return m }

// UnregisterConsumerRequestValidationError is the validation error returned by
// UnregisterConsumerRequest.Validate if the designated constraints aren't met.
type UnregisterConsumerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterConsumerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterConsumerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterConsumerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterConsumerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterConsumerRequestValidationError) ErrorName() string {
	return "UnregisterConsumerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterConsumerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterConsumerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterConsumerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterConsumerRequestValidationError{}

// Validate checks the field values on UnregisterConsumerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnregisterConsumerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnregisterConsumerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnregisterConsumerResponseMultiError, or nil if none found.
func (m *UnregisterConsumerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UnregisterConsumerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnregisterConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnregisterConsumerResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnregisterConsumerResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnregisterConsumerResponseMultiError(errors)
	}

	return nil
}

// UnregisterConsumerResponseMultiError is an error wrapping multiple
// validation errors returned by UnregisterConsumerResponse.ValidateAll() if
// the designated constraints aren't met.
type UnregisterConsumerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnregisterConsumerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnregisterConsumerResponseMultiError) AllErrors() []error { return m }

// UnregisterConsumerResponseValidationError is the validation error returned
// by UnregisterConsumerResponse.Validate if the designated constraints aren't met.
type UnregisterConsumerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnregisterConsumerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnregisterConsumerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnregisterConsumerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnregisterConsumerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnregisterConsumerResponseValidationError) ErrorName() string {
	return "UnregisterConsumerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnregisterConsumerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnregisterConsumerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnregisterConsumerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnregisterConsumerResponseValidationError{}
