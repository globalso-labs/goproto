// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: queuer/clients/v1/clients.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientService_StoreClientStats_FullMethodName = "/queuer.clients.v1.ClientService/StoreClientStats"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	StoreClientStats(ctx context.Context, opts ...grpc.CallOption) (ClientService_StoreClientStatsClient, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) StoreClientStats(ctx context.Context, opts ...grpc.CallOption) (ClientService_StoreClientStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ClientService_ServiceDesc.Streams[0], ClientService_StoreClientStats_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &clientServiceStoreClientStatsClient{stream}
	return x, nil
}

type ClientService_StoreClientStatsClient interface {
	Send(*StoreClientStatsRequest) error
	CloseAndRecv() (*StoreClientStatsResponse, error)
	grpc.ClientStream
}

type clientServiceStoreClientStatsClient struct {
	grpc.ClientStream
}

func (x *clientServiceStoreClientStatsClient) Send(m *StoreClientStatsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientServiceStoreClientStatsClient) CloseAndRecv() (*StoreClientStatsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreClientStatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility
type ClientServiceServer interface {
	StoreClientStats(ClientService_StoreClientStatsServer) error
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) StoreClientStats(ClientService_StoreClientStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method StoreClientStats not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_StoreClientStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientServiceServer).StoreClientStats(&clientServiceStoreClientStatsServer{stream})
}

type ClientService_StoreClientStatsServer interface {
	SendAndClose(*StoreClientStatsResponse) error
	Recv() (*StoreClientStatsRequest, error)
	grpc.ServerStream
}

type clientServiceStoreClientStatsServer struct {
	grpc.ServerStream
}

func (x *clientServiceStoreClientStatsServer) SendAndClose(m *StoreClientStatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientServiceStoreClientStatsServer) Recv() (*StoreClientStatsRequest, error) {
	m := new(StoreClientStatsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queuer.clients.v1.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreClientStats",
			Handler:       _ClientService_StoreClientStats_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "queuer/clients/v1/clients.proto",
}
